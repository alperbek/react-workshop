#+TITLE:     Rendering Static Pages in React
#+AUTHOR:    Ustun Ozgur
#+EMAIL:     ustun@ustunozgur.com
#+DATE:      2015-05-26 Tue
#+BEAMER-FRAME-LEVEL: 1
#+BEAMER_COLOR_THEME: spruce
#+OPTIONS: toc:nil outline:nil H:1

* Rendering a Static Page in React
** /render/ method

- In render, we return a JSX expression
- Composed of ordinary HTML elements or composite React components

* JSX in Detail

- Not a version of HTML or XML
- Transpiled to ordinary JavaScript
- ~<div name="foo" surname="bar">content</div>~
- =React.createElement('div', ({name: "foo", surname: "bar"}, "content")=
- Attributes collected in an object called /props/
- Children passed as consecutive arguments
- =functionForTheElement(props, children)=
- Can nest: Composite components

* A more complex Example

~<div name="foo"><span>Bar</span><span>Baz</span></div>~

#+BEGIN_SRC javascript
React.createElement('div', {name: 'foo'},
   React.createElement('span', {}, "Bar"),
   React.createElement('span', {}, "Baz"))
#+END_SRC

* JSX: Give it 5 Minutes

- HTML in JS?
- JS in HTML?
- Actually no mixing of JS and HTML, it is all JS

* Main Features

- Always return a single element
  - Just like you return a single value from a function
- All elements should be closed or self-closing
  - =<img/>=, =<input/>=
- Use curly braces to embed JSX expressions
  - =<div>{2 + 3}</div>= valid JSX

* Main Features

#+BEGIN_SRC js
var inner = <div>Hello</div>

var outer = <div>{inner} {inner}</div>
#+END_SRC
- Not string concetenation. =inner= is just another variable.
#+BEGIN_SRC js

var contents = [];

contents.push(inner);
contents.push(inner);

var outer = <div>{contents}</div>
#+END_SRC

* Main Features

#+BEGIN_SRC js
var names = ["John", "Mary", "Jane"];

var contents = names.map(function (name) {
    return <div>Hello {name}</div>;
});

var outer = <div>{contents}</div>
#+END_SRC

* Main Features
#+BEGIN_SRC js
var content;

if (this.props.color == "red") {
   content = <div>The color is red.</div>
}


outer = <div>{content}</div>
#+END_SRC

* Main Features

- If statements are not expressions
- But ternaries are expressions: ~a == 3 ? "a is 3" : "a is not 3"~

#+BEGIN_SRC js
outer = <div>{this.props.color == "red" ?
                <div>The color is red</div>:  null}</div>
#+END_SRC

#+BEGIN_SRC js
outer = <div>{this.props.color == "red" &&
               <div>The color is red</div>}</div>
#+END_SRC

- May or may not make the reading harder

* CSS in JSX

- JSX is JS behind the scenes
- =class= is reserved in JS
- Use =className= instead
- ~<div class="foo bar">~ becomes ~<div className="foo bar">~
- Styles in HTML are strings. In CSS, a syntax similar to
  JS objects
- In JSX, styles are real JS objects

* CSS in JSX (cont'd)

~<div style="color: red; background-color: yellow">~
- String converted to JS object
={color: 'red', backgroundColor: 'yellow'}=
~<div style={{color: 'red', backgroundColor: 'yellow'}}~
- Note the double ={='s: The first is for JSX, the second is for JS object
  literal
- No dashes: instead capitalize the next letter:
=backgroundColor= instead of =background-color=
- We could have quoted background-color since it is in object key position,
  but this is easier

* CSS in JSX (cont'd)

- Numbers in JSX: Most units are px in CSS: so automatically appende
#+BEGIN_EXAMPLE
fontSize:'12px'
#+END_EXAMPLE
can be written as:
#+BEGIN_EXAMPLE
fontSize: 12
#+END_EXAMPLE

* CSS in JSX (cont'd)

- Doesn't always work as expected. For lineHeight, the default unit is `em`
#+BEGIN_EXAMPLE
lineHeight: 18 means lineHeight: "18em"
#+END_EXAMPLE

Write
#+BEGIN_SRC
lineHeight: '18px'
#+END_SRC

* Converting Existing HTML to React

1. Create a React component called App. Take the existing HTML  and return it from the render method of the component.

2. Make the required CSS changes, so that classes are converted classNames, styles are converted to objects.

3. Ensure that all the tags are closed properly.

4. Reference the App.js file, add a container HTML element where your React component will live, mount the React component using `React.render`. In fact, you can directly mount to body, but this is discouraged since sometimes using external plugins such as Facebook or Twitter embeds add some nodes into the body and this might cause some bugs.

For Steps 2-3, run the transpiler in watch mode. Make changes until it no
longer complains.

* Tools for Converting JSX to JavaScript

- Transpilation
- Install *react-tools* using =npm install -g react-tools=
- Two modes: single file input, or directory input

* A Simple Example

#+BEGIN_SRC
var HelloWorld = React.createClass({
    render: function () {
            return <div>Hello World</div>
    }
})
#+END_SRC

In HTML, we have
#+BEGIN_SRC
<div id="app"></div>
#+END_SRC
Mount using:
#+BEGIN_SRC
React.render(<HelloWorld/>, document.getElementById('app'))
#+END_SRC

* Exercise 1: Getting up and running with React: 5-10 minutes

Hint: Look at Makefile for instructions.

a - Clone the repository

b - Go to =examples/01_hello_world=

c - Download react.js, install react-tools, compile the application using jsx, and see "Hello World" in browser.

d - Tweak the application so that you see "Hello Denmark!" in browser.

e - Repeat for the folder =examples/01_hello_world_watch= but this time, make sure to run jsx in watch mode.

f - Bonus: How would you copy the React.render call to an inline script in HTML? You need to transform the JSX manually to a React.createElement call.

g - Question: Why do we put the script at the end of body?

* A More Complex Example: ToDo App

- Given =examples/02_todo/mockup.html=, convert to React.
- Online HTML to JSX transformer:
  https://facebook.github.io/react/html-jsx.html
- Command line version: https://www.npmjs.com/package/htmltojsx
- Paste output in =src/todo.js=
- Run jsx in directory mode: =jsx src build=

* Exercise 2:

a - Convert the HTML given in =02_convert_mockup/mockup.html= to React. Note
that you will have two root nodes here, the main part and the footer.

b - Dissect the ToDo app in smaller components: You should have components
like SearchBar, Todos, TodoItem, Footer. This will prepare us for the next
section, in which we discuss props.
